import os
import glob
import logging
import numpy as np
import matplotlib.pyplot as plt
import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog
from tkinter import ttk  # For the Combobox
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Configure the logging system
logging.basicConfig(
    filename='plot_percentage.log',
    filemode='w',
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)


def read_percentage_file(file_path):
    """
    Reads a percentage file generated by contact analysis.

    Args:
        file_path (str): Path to the percentage file.

    Returns:
        tuple: Three lists containing residue1 indices, residue2 indices, and contact percentages.
    """
    resid1 = []
    resid2 = []
    percentage = []

    try:
        with open(file_path, 'r') as file:
            next(file)  # Skip the header line
            for line in file:
                columns = line.strip().split()
                if len(columns) < 3:
                    logging.warning(f"Skipping malformed line: {line.strip()}")
                    continue
                resid1.append(int(columns[0]))  # Residue 1
                resid2.append(int(columns[1]))  # Residue 2
                percentage.append(float(columns[2]))  # Contact percentage
        logging.info(f"Read {len(resid1)} contacts from {file_path}")
        if not resid1:
            logging.warning("No contacts found in the file.")
    except FileNotFoundError:
        messagebox.showerror("Error", f"Percentage file not found: {file_path}")
        logging.error(f"File not found: {file_path}")
    except Exception as e:
        messagebox.showerror("Error", f"Error reading the percentage file: {str(e)}")
        logging.error(f"Error reading the percentage file: {str(e)}")

    return resid1, resid2, percentage


def plot_contact_map(resid1, resid2, percentage, cmap='viridis'):
    """
    Generates a contact map plot based on percentage data.

    Args:
        resid1 (list): List of residue 1 indices.
        resid2 (list): List of residue 2 indices.
        percentage (list): List of contact percentages.
        cmap (str): Colormap to use for the plot.

    Returns:
        matplotlib.figure.Figure: The generated figure, or None if an error occurs.
    """
    if not resid1 or not resid2 or not percentage:
        logging.error("Incomplete or empty contact data.")
        messagebox.showerror("Error", "Cannot generate plot. Data is incomplete or empty.")
        return None

    max_residue = max(max(resid1, default=0), max(resid2, default=0))
    contact_map = np.zeros((max_residue, max_residue))

    # Populate the contact map matrix
    for r1, r2, perc in zip(resid1, resid2, percentage):
        contact_map[r1 - 1, r2 - 1] = perc
        contact_map[r2 - 1, r1 - 1] = perc  # Ensure symmetry

    # Create the plot
    fig, ax = plt.subplots(figsize=(8, 6))
    cax = ax.imshow(contact_map, cmap=cmap, origin='lower', aspect='equal')
    ax.set_title('Contact Map - Percentage')
    ax.set_xlabel('Residue 1')
    ax.set_ylabel('Residue 2')

    # Add a colorbar
    fig.colorbar(cax, ax=ax, label='Contact Percentage (%)')

    plt.tight_layout()
    return fig


def save_plot(fig):
    """
    Saves the generated plot as a PNG file.

    Args:
        fig (matplotlib.figure.Figure): The figure to save.
    """
    filepath = filedialog.asksaveasfilename(
        defaultextension=".png",
        filetypes=[("PNG Image", "*.png"), ("All Files", "*.*")]
    )
    if filepath:
        dpi = simpledialog.askinteger(
            "DPI",
            "Enter DPI for the plot (e.g., 300):",
            initialvalue=300,
            minvalue=100,
            maxvalue=1200
        )
        if dpi:
            try:
                fig.savefig(filepath, dpi=dpi, bbox_inches='tight')
                messagebox.showinfo("Saved", f"Plot saved to {filepath}")
                logging.info(f"Plot saved to {filepath}")
            except Exception as e:
                messagebox.showerror("Error", f"Error saving the plot: {str(e)}")
                logging.error(f"Error saving the plot: {str(e)}")


def plot_percentage_file(state):
    """
    Opens the percentage file and displays the contact map plot.

    Args:
        state (object): An object containing application state, specifically 'working_directory'.
    """
    # Locate the percentage file in the Contacts directory
    contacts_dir = os.path.join(state.working_directory, "Contacts")
    percentage_files = glob.glob(os.path.join(contacts_dir, "percentage_*.dat"))

    if not percentage_files:
        messagebox.showerror("Error", "No percentage files found.")
        logging.error("No percentage files found in the 'Contacts' directory.")
        return

    percentage_file = percentage_files[0]  # Select the first found file

    # Read data from the percentage file
    resid1, resid2, percentage = read_percentage_file(percentage_file)
    if not resid1 or not resid2 or not percentage:
        messagebox.showerror("Error", "Error processing the percentage file.")
        return

    # Create a new window for the plot interface
    plot_window = tk.Toplevel()
    plot_window.title("Contact Map Plot")
    plot_window.geometry("900x700")  # Set default window size

    # Define fonts
    widget_font = 'Helvetica'  # Font for Tkinter widgets
    plot_font = 'Ubuntu'  # Font for plot elements

    # Configure grid layout to allow window resizing
    plot_window.columnconfigure(0, weight=1)
    plot_window.rowconfigure(1, weight=1)

    # Create a frame for the top controls to center them
    top_frame = ttk.Frame(plot_window)
    top_frame.grid(row=0, column=0, pady=10)

    # Create the Combobox for colormap selection with minimal spacing
    cmap_var = tk.StringVar(value='viridis')
    cmap_label = ttk.Label(top_frame, text="Colormap:", font=(widget_font, 12, 'bold'))
    cmap_label.pack(side='left', padx=(0, 5))  # Minimal right padding

    cmap_combobox = ttk.Combobox(
        top_frame,
        textvariable=cmap_var,
        values=plt.colormaps(),
        state="readonly",
        font=(widget_font, 12)
    )
    cmap_combobox.set("viridis")  # Default colormap
    cmap_combobox.pack(side='left', padx=(0, 10))  # Minimal left padding

    # Create the Save Plot button
    save_button = ttk.Button(top_frame, text="Save Plot", style='Custom.TButton')
    save_button.pack(side='left')  # No padding needed

    canvas_widget = None  # Placeholder for the canvas widget

    def generate_plot():
        """
        Generates and displays the contact map plot based on the selected colormap.
        """
        nonlocal canvas_widget
        fig = plot_contact_map(resid1, resid2, percentage, cmap=cmap_var.get())
        if fig is not None:
            # Remove existing canvas if present
            if canvas_widget is not None:
                canvas_widget.get_tk_widget().destroy()
                canvas_widget = None

            # Create a new canvas for the plot
            canvas_widget = FigureCanvasTkAgg(fig, master=plot_window)
            canvas_widget.draw()
            canvas_widget.get_tk_widget().grid(
                row=1, column=0, padx=10, pady=10, sticky="nsew"
            )

            # Configure the Save button to save the current plot
            save_button.config(command=lambda: save_plot(fig))

    # Bind the Combobox selection change to regenerate the plot
    cmap_combobox.bind("<<ComboboxSelected>>", lambda event: generate_plot())

    # Generate the initial plot
    generate_plot()

    # Start the event loop for the plot window
    plot_window.mainloop()
